@model IQueryable<MyTracking.Models.Arrive>
@{
    ViewBag.Title = "Rastrear";
}

<h2>Rastrear</h2>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <script type="text/javascript">
    $(document).ready(function () {
        Initialize();

        
        function replacer(key, value) {
            // Filtrando propiedades 
            return value;
        };
    });

    // Where all the fun happens
    function Initialize() {
        var Latitud = @ViewBag.GeoLat;
        var Longitud = @ViewBag.GeoLong;
        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 14,
            center: new google.maps.LatLng(Latitud, Longitud),
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // This shows adding a simple pin "marker" - this happens to be the Tate Gallery in Liverpool!
        var myLatlng = new google.maps.LatLng(Latitud, Longitud);

        var PosicionActual = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: '@ViewBag.Placename'
        });

        // You can make markers different colors...  google it up!
        PosicionActual.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

        var myLatlng = new google.maps.LatLng(@ViewBag.DestGeoLat, @ViewBag.DestGeoLong); 

        var PosicionFinal = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: 'Destino'
        })

        PosicionFinal.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png')

        // a sample list of JSON encoded data of places to visit in Liverpool, UK
        // you can either make up a JSON list server side, or call it from a controller using JSONResult      
        var info = "@ViewBag.Data".replace(/&#39;/g, '"');
        var data = JSON.parse(info);

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2>" + "</div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


        </script>
}
